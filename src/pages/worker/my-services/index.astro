---
import { Icon } from 'astro-icon/components'
import WorkersLayout from '@/modules/workers/layouts/WorkersLayout.astro'
import { getSession } from 'auth-astro/server'
import CreatePublicationForm from '@/modules/workers/components/publications/CreatePublicationForm.astro'
import EditPublicationForm from '@/modules/workers/components/publications/EditPublicationForm.astro'
import { actions } from 'astro:actions'

const session = await getSession( Astro.request )

const { user } = session ?? {}
if ( !user ) return Astro.redirect( '/auth/signin' )

const { data: workerProfileData, error: workerProfileError } = await actions.findOneWorkerProfileByUserId({ userId: user.id })
if ( workerProfileError ) return Astro.redirect( '/404' )
const { workerProfile } = workerProfileData

const { data: servicesData, error: servicesError } = await actions.findAllServicesByWorkerId({ workerId: workerProfile.id })
if ( servicesError ) return Astro.redirect( '/worker' )
const { services } = servicesData
---

<WorkersLayout>
  <div class="bg-gray-100">
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <div class="px-4 py-6 sm:px-0">
        <h2 class="text-2xl font-semibold text-gray-900 mb-6">Bienvenido, { user.name } ðŸ‘‹</h2>

        <div class="min-h-screen bg-gray-100 p-4 sm:p-6 md:p-8">
          <div class="max-w-4xl mx-auto">
            <h1 class="text-3xl font-bold mb-6 text-gray-800 flex items-center gap-2">
              <Icon name="mdi:account-hard-hat" class="ml-2" size={ 30 } />Panel de Trabajador
            </h1>

            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
              <button
                class="w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors flex items-center justify-center gap-2"
                id="create-publication-button"
              >
                <Icon name="mdi:plus-circle-outline" class="ml-2" size={ 24 } />Crear Nueva PublicaciÃ³n
              </button>
            </div>
            <div
              id="create-publication-modal"
              class="hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 z-50"
            >
              <div class="bg-white rounded-lg p-6 w-full max-w-md">
                <div class="w-full flex justify-end items-center">
                  <button
                    class="text-gray-500 hover:text-gray-700 transition-colors"
                    id="close-create-publication-modal"
                  >
                    <Icon name="mdi:close" size={ 24 } />
                  </button>
                </div>
                <CreatePublicationForm />
              </div>
            </div>


            <div class="space-y-6">
              { services.map(service => (
              <>
              <div
                id={`edit-publication-modal-${service.id}`}
                class="hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 z-50 edit-publication-modal"
              >
                <div class="bg-white rounded-lg p-6 w-full max-w-md">
                  <div class="w-full flex justify-end items-center">
                    <button
                      class="text-gray-500 hover:text-gray-700 transition-colors close-edit-publication-modal"
                      id={`close-edit-publication-modal-${service.id}`}
                    >
                      <Icon name="mdi:close" size={ 24 } />
                    </button>
                  </div>
                  <EditPublicationForm
                    publicationId={ service.id }
                  />
                </div>
              </div>
              <div id={`service-${service.id}`} class="bg-white rounded-lg shadow-md overflow-hidden p-12">
                <img src={service.imageUrl} alt={service.title} class="w-full h-80 object-cover" />

                <div class="p-6 relative">
                  <div class="absolute top-2 right-2">
                    <button
                      class="text-gray-500 hover:text-gray-700 dots-vertical"
                      id={ `dots-vertical-${ service.id }` }
                    >
                      <Icon name="mdi:dots-vertical" size={ 24 } />
                    </button>
                    <div
                      class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 hidden p-4"
                      id={ `service-menu-${ service.id }` }
                    >
                      <div class="py-1">
                        <button
                          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left edit-service-button"
                          id={ `edit-service-${ service.id }` }
                          data-id={ service.id }
                        >
                          Editar
                        </button>
                        <button
                          class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left delete-service-button"
                          id={ `delete-service-${ service.id }` }
                          data-id={ service.id }
                        >
                          Eliminar
                        </button>
                      </div>
                    </div>
                  </div>
                  <h3 class="text-xl font-semibold mb-2 text-gray-800">{service.title}</h3>
                  <p class="text-gray-600 mb-4">{service.description}</p>
                  <div class="flex justify-between items-center mb-4">
                    <span class="text-sm text-gray-500">
                      <Icon name="mdi:calendar" size={ 24 } />
                      {service.createdAt.toLocaleDateString()}
                    </span>
                    <span class="text-sm font-semibold text-yellow-500">
                      <Icon name="mdi:star" size={ 24 } />
                      {service.starCost} estrellas
                    </span>
                  </div>
                  <div class="flex items-center mb-4">
                    <span class="bg-blue-100 text-blue-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded">
                      {
                      service.category.name
                      }
                    </span>
                  </div>
                  <h4 class="text-lg font-semibold mb-2 text-gray-700">Comentario Reciente</h4>

                  <button
                    class="w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors"
                  >
                    <i class="mdi mdi-comment-multiple-outline mr-2"></i>Ver todos los comentarios
                  </button>
                </div>
              </div>
            </>
              )) }
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</WorkersLayout>
<script>
import { actions } from 'astro:actions'
import Swal from 'sweetalert2'

const createPublicationButton = document.getElementById( 'create-publication-button' ) as HTMLButtonElement
const createPublicationModal = document.getElementById( 'create-publication-modal' ) as HTMLDivElement
const closeCreatePublicationModal = document.getElementById( 'close-create-publication-modal' ) as HTMLButtonElement

createPublicationButton.addEventListener( 'click', () => {
  createPublicationModal.classList.remove( 'hidden' )
  createPublicationModal.classList.add( 'flex' )
} )

closeCreatePublicationModal.addEventListener( 'click', () => {
  createPublicationModal.classList.add( 'hidden' )
  createPublicationModal.classList.remove( 'flex' )
} )

const dotsVerticalButtons = document.querySelectorAll( '.dots-vertical' ) as NodeListOf<HTMLButtonElement>

dotsVerticalButtons.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.id.replace( 'dots-vertical-', '' )
    const serviceIdentifier = `service-menu-${id}`
    console.log({ serviceIdentifier })
    const serviceMenu = document.getElementById( `service-menu-${id}` ) as HTMLDivElement
    console.log({ serviceMenu })
    serviceMenu.classList.toggle( 'hidden' )
  } )
} )

const deleteServiceButtons = document.querySelectorAll( '.delete-service-button' ) as NodeListOf<HTMLButtonElement>

deleteServiceButtons.forEach( button => {
  button.addEventListener( 'click', async () => {
    const id = button.dataset.id
    const { error } = await actions.deleteService({ id: String( id ) })
    if ( error ) {
      Swal.fire( {
        icon: 'error',
        title: 'Â¡Error al Eliminar el Servicio!',
        text: 'OcurriÃ³ un error al intentar eliminar el servicio. Por favor, intÃ©ntalo de nuevo.',

      } )
      return
    }
    Swal.fire( {
      icon: 'success',
      title: 'Â¡Servicio Eliminado!',
      text: 'El servicio ha sido eliminado exitosamente.',
    } )

    const serviceElement = document.getElementById( `service-${id}` ) as HTMLDivElement
    serviceElement.remove()
  } )
} )


const editServiceButtons = document.querySelectorAll( '.edit-service-button' ) as NodeListOf<HTMLButtonElement>

editServiceButtons.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.dataset.id
    const serviceIdentifier = `edit-publication-modal-${id}`
    console.log({ serviceIdentifier })
    const serviceModal = document.getElementById( serviceIdentifier ) as HTMLDivElement
    console.log({ serviceModal })
    serviceModal.classList.remove( 'hidden' )
    serviceModal.classList.add( 'flex' )
  } )
} )

const closeEditServiceModals = document.querySelectorAll( '.close-edit-publication-modal' ) as NodeListOf<HTMLButtonElement>

closeEditServiceModals.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.id.replace( 'close-edit-publication-modal-', '' )
    const serviceIdentifier = `edit-publication-modal-${id}`
    console.log({ serviceIdentifier })
    const serviceModal = document.getElementById( serviceIdentifier ) as HTMLDivElement
    console.log({ serviceModal })
    serviceModal.classList.add( 'hidden' )
    serviceModal.classList.remove( 'flex' )
  } )
} )
</script>
