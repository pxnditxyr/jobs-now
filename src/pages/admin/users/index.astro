---
import AdminLayout from '@/modules/admin/layouts/AdminLayout.astro'
import { actions } from 'astro:actions'

const { data: usersData, error: usersError } = await actions.findAllUsers()

if ( usersError ) return Astro.redirect( '/admin/dashboard' )

const { users } = usersData

const roleColors = {
  admin: 'bg-blue-100 text-blue-800',
  worker: 'bg-green-100 text-green-800',
  client: 'bg-purple-100 text-purple-800',
}
---

<AdminLayout>
   <div class="container mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-6 text-gray-800">ðŸ‘¥ AdministraciÃ³n de Usuarios</h1>

      <div class="mb-4 flex justify-between items-center">
        <a
          class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary-dark transition-colors"
          href="/admin/users/create"
        >
          <i class="mdi mdi-account-plus mr-2"></i>
          Agregar Usuario
        </a>
        <div class="relative">
          <input
            type="text"
            placeholder="Buscar usuarios..."
            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
          />
          <i class="mdi mdi-magnify absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
        </div>
      </div>

      <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usuario</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {users.map((user) => (
              <tr key={user.id}>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                      <img class="h-10 w-10 rounded-full" src={`https://ui-avatars.com/api/?name=${user.name}+${user.lastName}&background=random`} alt="" />
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-gray-900">{user.name} {user.lastName}</div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">{user.email}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${ roleColors[ user.role ] }`}>
                    { user.role }
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${user.status ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {user.status ? 'Activo' : 'Inactivo'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button class="text-indigo-600 hover:text-indigo-900 mr-3">
                    <i class="mdi mdi-pencil"></i> Editar
                  </button>
                  <button class="text-red-600 hover:text-red-900">
                    <i class="mdi mdi-delete"></i> Eliminar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

</AdminLayout>
<script>
import { actions } from 'astro:actions'
import Swal from 'sweetalert2'


const deleteButtons = document.querySelectorAll( '.delete-button' )

deleteButtons.forEach( ( button ) => {
  button.addEventListener( 'click', async ( _e ) => {

    const id = button.getAttribute( 'data-id' )

    const currentStatus = button.getAttribute( 'data-current-status' ) === 'true'
    console.log({ currentStatusPrim: currentStatus })

    if ( !id ) return

    const { error } = await actions.toggleStatusUser( { id, currentStatus } )

    if ( error ) {

      Swal.fire( {
        icon: 'error',
        title: 'Error al eliminar el usuario',
        text: 'No se pudo eliminar el usuario. Por favor, intÃ©ntelo de nuevo.',
      } )
      return
    }

    Swal.fire({
      icon: 'success',
      title: 'Perfecto!',
      text: `Se realizo la accion`,
    })

    button.setAttribute('data-current-status', (!currentStatus).toString())

    const statusSpan = document.querySelector( `#span-status-${ id }` ) as HTMLElement

    if ( !currentStatus ) {
      statusSpan.classList.add( 'bg-green-100' )
      statusSpan.classList.add( 'text-green-800' )
      statusSpan.classList.remove( 'bg-red-100' )
      statusSpan.classList.remove( 'text-red-800' )
      statusSpan.textContent = 'Activo'
      console.log({ statusSpan: statusSpan.innerText })
    } else {
      statusSpan.classList.add( 'bg-red-100' )
      statusSpan.classList.add( 'text-red-800' )
      statusSpan.classList.remove( 'bg-green-100' )
      statusSpan.classList.remove( 'text-green-800' )
      statusSpan.textContent = 'Inactivo'
      console.log({ statusSpan1: statusSpan.innerText })
    }

    button.textContent = currentStatus ? 'Restaurar' : 'Eliminar'

  } )
} )

</script>
