---
import { actions } from 'astro:actions'
import { getSession } from 'auth-astro/server'
import { Icon } from 'astro-icon/components'
import ClientLayout from '@/modules/clients/layouts/ClientLayout.astro'

const session = await getSession( Astro.request )
const workerId = Astro.url.searchParams.get( 'workerId' ) ?? ''

const { user } = session ?? {}

if ( !user ) return Astro.redirect( '/auth/signin' )

//const { data: walletData, error: walletError } = await actions.findOneWalletByUserId({ userId: user.id })
const { data: walletData, error: walletError } = await Astro.callAction( actions.findOneWalletByUserId, { userId: user.id } )
if ( walletError ) return Astro.redirect( '/' )

const { wallet } = walletData

//const { data: workerData, error: workerError } = await actions.findOneUser({ id: workerId })
const { data: workerData, error: workerError } = await Astro.callAction( actions.findOneUser, { id: workerId } )
if ( workerError ) return Astro.redirect( '/client' )
const { user: worker } = workerData

const { data: workerProfileData, error: workerProfileError } = await Astro.callAction( actions.findOneWorkerProfileByUserId, { userId: workerId } )
if ( workerProfileError ) return Astro.redirect( '/client' )
const { workerProfile } = workerProfileData

const { data: currentHiringData, error: currentHiringError } = await Astro.callAction( actions.getHiringByUserId, { userId: user.id, wokerProfileId: workerProfile.id } )
if ( currentHiringError ) return Astro.redirect( '/client' )
const { hiring: currentHiring } = currentHiringData


const statesTransform: Record<string, { text: string, styles: string }> = {
  'pending': {
    text: 'Pendiente',
    styles: 'bg-blue-200 text-blue-600',
  },
  'approved': {
    text: 'Aprobado',
    styles: 'bg-yellow-200 text-yellow-600',
  },
  'rejected': {
    text: 'Rechazado',
    styles: 'bg-red-200 text-red-600',
  },
  'completed': {
    text: 'Completado',
    styles: 'bg-green-200 text-green-600',
  },
}
---

<ClientLayout>
  <div class="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8">
    <div class="max-w-3xl mx-auto bg-white rounded-lg shadow-md overflow-hidden">
      <div class="p-6">
        <h1 class="text-2xl font-bold mb-4 text-center">Contratación de Servicio 📝</h1>

        <div class="flex items-center mb-6">
          <img
            src={ worker?.avatar || '/avatar.svg' }
            alt={`${ worker?.name } ${worker?.lastName}`}
            class="w-16 h-16 rounded-full mr-4"
          />
          <div>
            <h2 class="text-xl font-semibold">{worker?.name} {worker?.lastName}</h2>
            <!--<p class="text-gray-600">{service?.title}</p>-->
          </div>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Descripción del Servicio 🔧</h3>
          <!--<p class="text-gray-700">{service?.description}</p>-->
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Costo del Servicio 💰</h3>
          <p class="text-2xl font-bold text-green-600 flex items-center gap-2">
            <Icon name="mdi:star" size={ 24 } class="text-yellow-400" />
            { 1 } estrella
            <!--{service?.starCost} estrellas-->
          </p>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Tus Estrellas Disponibles  💳</h3>
          <p class="text-xl flex items-center gap-2">
            <Icon name="mdi:star" size={ 24 } class="text-yellow-400" />
            { wallet?.stars } estrellas
          </p>
        </div>

        <form class="mb-6" id="create-hiring-form" data-wallet-id={ wallet.id }>
          <input type="hidden" name="workerProfileId" value={ workerProfile.id } />
          <input type="hidden" name="userId" value={ user.id } />
          <div class="mb-6">
            <label for="description" class="block text-sm font-medium text-gray-700">Descripción <span class="text-red-500">*</span></label>
            <textarea
              id="description"
              name="description"
              placeholder="Ingrese una breve descripción de lo que necesitas para ver si el trabajador está dispuesto a ofrecerte un servicio."
              class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:border-indigo-600 sm:text-sm mt-2"
              rows={ 3 }
              disabled={ ( currentHiring?.state === 'pending' || currentHiring?.state === 'approved' ) ? true : false }
              required
            ></textarea>
          </div>

          <div class="mb-6">
            <h3 class="text-lg font-semibold mb-2"> Fecha de Inicio  del Servicio 📅</h3>
            <input
              type="date"
              class="w-full p-2 border border-gray-300 rounded-md"
              name="contractDate"
              min={ new Date().toISOString().split( 'T' )[ 0 ] }
              value={ new Date().toISOString().split( 'T' )[ 0 ] }
              disabled={ ( currentHiring?.state === 'pending' || currentHiring?.state === 'approved' ) ? true : false }
            />
          </div>
          {
          ( currentHiring ) ? (
            ( currentHiring.state === 'pending' || currentHiring.state === 'approved' ) ? (
          <div class="flex flex-col items-center justify-center gap-8">
            <p class="text-slate-500 text-sm font-bold flex items-center gap-2">
              <Icon name="mdi:cancel" size={ 24 } class="text-red-600" />
              Parece que usted tiene un contrato en proceso, por favor espere a que se complete. 📝 el estado de su contrato es:
              <span class={ `${ statesTransform[ currentHiring.state ].styles } px-2 py-1 rounded-full` }>{ statesTransform[ currentHiring.state ].text }</span>
            </p>
            {
             ( currentHiring.state === 'approved' ) && (
              <a href={ `/client/conversations/?userId=${ user.id }&workerId=${ worker.id }` } class="text-white bg-green-500 p-2 rounded-lg transition-colors duration-300">
                Ver el Chat
              </a>
             )
            }
          </div>
          ) : (
            ( currentHiring.state === 'rejected' ) ? (
          <div class="flex flex-col items-center justify-center gap-8">
            <p class="text-slate-500 text-sm font-bold flex items-center gap-2">
              <Icon name="mdi:cancel" size={ 24 } class="text-red-600" />
              Parece que usted tiene un contrato rechazado, usted puede volver a solicitar el servicio contratarlo. 📝
            </p>
            <div class="w-full flex items-center justify-center gap-4">
              <button
                type="submit"
                class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors duration-300 flex justify-center items-center gap-2"
              >
                <Icon name="mdi:check-circle" size={ 24 } class="text-white" />
                Intentar Contratar Servicio Nuevamente
              </button>
            </div>
            <a href={ `/client/conversations/?userId=${ user.id }&workerId=${ worker.id }` } class="text-white bg-green-500 p-2 rounded-lg transition-colors duration-300">
              Ver el Chat
            </a>
          </div>
          ) : (
          <div class="flex flex-col items-center justify-center gap-8">
            <p class="text-slate-500 text-sm font-bold flex items-center gap-2">
              <Icon name="mdi:check-circle" size={ 24 } class="text-green-600" />
              Parece que usted tiene un contrato completado, usted puede volver a solicitar el servicio contratarlo. 📝
            </p>
            <div class="w-full flex items-center justify-center gap-4">
              <button
                type="submit"
                class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors duration-300 flex justify-center items-center gap-2"
              >
                <Icon name="mdi:check-circle" size={ 24 } class="text-white" />
                Recontratar Servicio
              </button>
            </div>

          </div>
          )
          )

          ) : (
          <div class="w-full flex items-center justify-center gap-4">
            <button
              type="submit"
              class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors duration-300 flex justify-center items-center gap-2"
            >
              <Icon name="mdi:check-circle" size={ 24 } class="text-white" />
              Confirmar Contratación
            </button>
          </div>
          )
          }
        </form>
      </div>
    </div>
  </div>
</ClientLayout>

<script>
import { actions } from 'astro:actions'
import { getErrorList } from '@/utils'
import Swal from 'sweetalert2'

const createHiringForm = document.getElementById( 'create-hiring-form' ) as HTMLFormElement
createHiringForm.addEventListener( 'submit', async ( event ) => {
  event.preventDefault()
  const walletId = createHiringForm.dataset.walletId ?? ''

  const { error } = await actions.paymentAmountWallet({
    id: walletId,
    amount: 2,
    stars: 1,
  })

  if ( error ) {
    const errorMessages = getErrorList( error )
    const errorMessage = errorMessages.map( ( { message } ) => message ).join( '\n' )
    Swal.fire({
      icon: 'error',
      title: '¡Ups! Algo salió mal en la transferencia 😢',
      text: errorMessage,
    })
    return
  }

  const formData = new FormData( createHiringForm )

  const { error: hiringError } = await actions.createHiringWorker( formData )

  if ( hiringError ) {
    const errorMessages = getErrorList( hiringError )
    const errorMessage = errorMessages.map( ( { message } ) => message ).join( '\n' )
    Swal.fire({
      icon: 'error',
      title: '¡Ups! Algo salió mal en la transferencia 😢',
      text: errorMessage,
    })
    return
  }

  Swal.fire( {
    icon: 'success',
    title: '¡Transferencia realizada! 🎉',
    text: 'La transferencia ha sido realizada con éxito.',
  })

  window.location.reload()
  return
} )
</script>
