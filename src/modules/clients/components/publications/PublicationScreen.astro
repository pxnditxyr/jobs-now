---
import { Icon } from 'astro-icon/components'
import CreateCommentForm from '@/modules/workers/components/publications/CreateCommentForm.astro'
import { formatDate } from '@/utils'

interface Props {
  service: {
    id: string
    title: string
    description: string
    imageUrl: string
    createdAt: Date
    starCost: number
    status: boolean
    category: {
      id: string
      name: string
    }
  }
}

const { service } = Astro.props
if ( !service.status ) return Astro.redirect( '/worker/my-publications' )
---

<div id={`service-${service.id}`} class="bg-white rounded-lg shadow-md overflow-hidden p-12">
  <img src={ service.imageUrl } alt={service.title} class="w-full h-80 object-cover" />

  <div class="p-6 relative">
    <h3 class="text-xl font-semibold mb-2 text-gray-800">{service.title}</h3>
    <p class="text-gray-600 mb-4">{service.description}</p>
    <div class="flex justify-between items-start md:items-center mb-4 flex-col gap-4 md:flex-row">
      <span class="text-sm text-gray-500 flex items-center gap-2 w-full">
        <Icon name="mdi:calendar" size={ 24 } />
        { formatDate( service.createdAt ) }
      </span>
      <span class="text-sm font-semibold text-yellow-500 flex items-center gap-2 w-full">
        <Icon name="mdi:star" size={ 24 } />
        { service.starCost } estrellas
      </span>
    </div>
    <div class="flex items-center mb-4">
      <span class="bg-blue-100 text-blue-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded capitalize">
        { service.category.name }
      </span>
    </div>

    <button
      class="w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors flex items-center justify-center gap-2 comment-publication-button"
      id={`comment-publication-button-${ service.id }`}
    >
      <Icon name="mdi:comment-multiple-outline" size={ 24 } />Comentar
    </button>

    <div
      id={`comment-publication-modal-${ service.id }`}
      class="hidden fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 z-50 edit-publication-modal"
    >
      <div class="bg-white rounded-lg p-6 w-full max-w-md">
        <div class="w-full flex justify-end items-center">
          <button
            class="text-gray-500 hover:text-gray-700 transition-colors close-comment-publication-modal"
            id={`close-comment-publication-modal-${ service.id }`}
          >
            <Icon name="mdi:close" size={ 24 } />
          </button>
        </div>
        <CreateCommentForm
          publicationId={ service.id }
        />

      </div>
    </div>
  </div>
</div>

<script>
const commentPublicationButtons = document.querySelectorAll( '.comment-publication-button' ) as NodeListOf<HTMLButtonElement>

commentPublicationButtons.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.id.replace( 'comment-publication-button-', '' )
    const serviceIdentifier = `comment-publication-modal-${id}`
    const serviceModal = document.getElementById( serviceIdentifier ) as HTMLDivElement
    serviceModal.classList.remove( 'hidden' )
    serviceModal.classList.add( 'flex' )
  } )
} )

const closeCommentPublicationModals = document.querySelectorAll( '.close-comment-publication-modal' ) as NodeListOf<HTMLButtonElement>

closeCommentPublicationModals.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.id.replace( 'close-comment-publication-modal-', '' )
    const serviceIdentifier = `comment-publication-modal-${id}`
    const serviceModal = document.getElementById( serviceIdentifier ) as HTMLDivElement
    serviceModal.classList.add( 'hidden' )
    serviceModal.classList.remove( 'flex' )
  } )
} )


</script>
