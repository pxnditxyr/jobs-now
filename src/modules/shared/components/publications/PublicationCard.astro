---
import { Icon } from 'astro-icon/components'
import CreateCommentForm from '@/modules/workers/components/publications/CreateCommentForm.astro'
import { formatDate } from '@/utils'
import { getSession } from 'auth-astro/server'

const session = await getSession( Astro.request )
const { user } = session ?? {}

interface Props {
  service: {
    id: string
    title: string
    description: string
    imageUrl: string
    createdAt: Date
    starCost: number
    category: {
      id: string
      name: string
    }
  }
}

const { service } = Astro.props
---

<div id={`service-${service.id}`} class="bg-white rounded-lg overflow-hidden p-6"
  style={"-webkit-box-shadow: 5px 5px 16px 0px rgba(6,55,255,1); -moz-box-shadow: 5px 5px 16px 0px rgba(6,55,255,1); box-shadow: 5px 5px 16px 0px rgba(0,0,0,1);"}
>
  <img src={ service.imageUrl } alt={service.title} class="w-full h-80 object-cover rounded-lg" />

  <div class="p-6 relative">
    <h3 class="text-xl font-semibold mb-2 text-gray-800">{ service.title }</h3>
    <p class="text-gray-600 mb-4">{service.description}</p>
    <div class="flex justify-between items-start md:items-center mb-4 flex-col gap-4 md:flex-row">
      <span class="text-sm text-gray-500 flex items-center gap-2 w-full">
        <Icon name="mdi:calendar" size={ 24 } />
        { formatDate( service.createdAt ) }
      </span>
      <span class="text-sm font-semibold text-yellow-500 flex items-center gap-2 w-full">
        <Icon name="mdi:star" size={ 24 } />
        { service.starCost } estrellas
      </span>
    </div>
    <div class="flex items-center mb-4">
      <span class="bg-blue-100 text-blue-800 text-lg font-semibold mr-2 px-3 py-1 rounded capitalize">
        { service.category.name }
      </span>
    </div>
    <a
      class="w-full bg-sky-900 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors flex items-center justify-center gap-2 comment-publication-button"
      id={`comment-publication-button-${ service.id }`}
      href={ `/client/publications/${ service.id }` }
    >
      <Icon name="mdi:comment-multiple-outline" size={ 24 } />Ver todos los comentarios
    </a>
  </div>
</div>

<script>
import { actions } from 'astro:actions'
import Swal from 'sweetalert2'

const dotsVerticalButtons = document.querySelectorAll( '.dots-vertical' ) as NodeListOf<HTMLButtonElement>

dotsVerticalButtons.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.id.replace( 'dots-vertical-', '' )
    const serviceIdentifier = `service-menu-${id}`
    const serviceMenu = document.getElementById( `service-menu-${id}` ) as HTMLDivElement
    serviceMenu.classList.toggle( 'hidden' )
  } )
} )

const deleteServiceButtons = document.querySelectorAll( '.delete-service-button' ) as NodeListOf<HTMLButtonElement>

deleteServiceButtons.forEach( button => {
  button.addEventListener( 'click', async () => {
    const id = button.dataset.id
    const { error } = await actions.deleteService({ id: String( id ) })
    if ( error ) {
      Swal.fire( {
        icon: 'error',
        title: '¡Error al Eliminar el Servicio!',
        text: 'Ocurrió un error al intentar eliminar el servicio. Por favor, inténtalo de nuevo.',

      } )
      return
    }
    Swal.fire( {
      icon: 'success',
      title: '¡Servicio Eliminado!',
      text: 'El servicio ha sido eliminado exitosamente.',
    } )

    const serviceElement = document.getElementById( `service-${id}` ) as HTMLDivElement
    serviceElement.remove()
  } )
} )


const editServiceButtons = document.querySelectorAll( '.edit-service-button' ) as NodeListOf<HTMLButtonElement>

editServiceButtons.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.dataset.id
    const serviceIdentifier = `edit-publication-modal-${id}`
    const serviceModal = document.getElementById( serviceIdentifier ) as HTMLDivElement
    serviceModal.classList.remove( 'hidden' )
    serviceModal.classList.add( 'flex' )
  } )
} )

const closeEditServiceModals = document.querySelectorAll( '.close-edit-publication-modal' ) as NodeListOf<HTMLButtonElement>

closeEditServiceModals.forEach( button => {
  button.addEventListener( 'click', () => {
    const id = button.id.replace( 'close-edit-publication-modal-', '' )
    const serviceIdentifier = `edit-publication-modal-${id}`
    const serviceModal = document.getElementById( serviceIdentifier ) as HTMLDivElement
    serviceModal.classList.add( 'hidden' )
    serviceModal.classList.remove( 'flex' )
  } )
} )

</script>
